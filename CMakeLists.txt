# CMakeLists.txt
# Copyright 2022, 2023  Thomas Cort
#
# Copying and distribution of this file, with or without modification, are
# permitted in any medium without royalty, provided the copyright notice and
# this notice are preserved. This file is offered as-is, without any warranty.

cmake_minimum_required(VERSION 3.12 FATAL_ERROR)

# project version MUST be an integer
project(tcutils VERSION 2022 DESCRIPTION "a collection of software tools, utilities, and games" LANGUAGES C)

set(PROJECT_AUTHOR "Thomas Cort")
set(PROJECT_COPYRIGHT "Copyright (C) 2022, 2023  Thomas Cort")
set(PROJECT_LICENSE "License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\nThis is free software: you are free to change and redistribute it.\\nThere is NO WARRANTY, to the extent permitted by law.")

include(GNUInstallDirs)

set(ENV{PKG_CONFIG_PATH} "$ENV{PKG_CONFIG_PATH}:/usr/local/share/pkgconfig")

find_package(PkgConfig REQUIRED)
pkg_check_modules(LIBTC REQUIRED tc)
link_directories(${LIBTC_LIBRARY_DIRS})

find_package(Curses REQUIRED)
include_directories(${CURSES_INCLUDE_DIR})
list(APPEND CURSES_PROGS clear)
list(APPEND CURSES_PROGS more)
list(APPEND CURSES_PROGS snek)

find_package(CURL REQUIRED)
include_directories(${CURL_INCLUDE_DIR})
list(APPEND CURL_PROGS rest)
list(APPEND CURL_PROGS up)

list(APPEND PROGS arch)
list(APPEND PROGS basename)
list(APPEND PROGS bfi)
list(APPEND PROGS cat)
list(APPEND PROGS catfacts)
list(APPEND PROGS chef)
list(APPEND PROGS cmp)
list(APPEND PROGS coinflip)
list(APPEND PROGS compress)
list(APPEND PROGS copy)
list(APPEND PROGS crc32)
list(APPEND PROGS cw2wav)
list(APPEND PROGS d6)
list(APPEND PROGS date)
list(APPEND PROGS dc)
list(APPEND PROGS dec2hex)
list(APPEND PROGS decompress)
list(APPEND PROGS dirname)
list(APPEND PROGS dogfacts)
list(APPEND PROGS dos2unix)
list(APPEND PROGS du)
list(APPEND PROGS duck)
list(APPEND PROGS echo)
list(APPEND PROGS expand)
list(APPEND PROGS extract)
list(APPEND PROGS factor)
list(APPEND PROGS false)
list(APPEND PROGS fgrep)
list(APPEND PROGS fold)
list(APPEND PROGS forage)
list(APPEND PROGS foreach)
list(APPEND PROGS grep)
list(APPEND PROGS gzinfo)
list(APPEND PROGS head)
list(APPEND PROGS hexdump)
list(APPEND PROGS host)
list(APPEND PROGS hostid)
list(APPEND PROGS hostname)
list(APPEND PROGS hr)
list(APPEND PROGS kill)
list(APPEND PROGS leave)
list(APPEND PROGS line)
list(APPEND PROGS link)
list(APPEND PROGS litc)
list(APPEND PROGS ln)
list(APPEND PROGS loc)
list(APPEND PROGS logger)
list(APPEND PROGS logname)
list(APPEND PROGS lolcat)
list(APPEND PROGS lowercase)
list(APPEND PROGS ls)
list(APPEND PROGS luhn)
list(APPEND PROGS machine)
list(APPEND PROGS makewords)
list(APPEND PROGS md2)
list(APPEND PROGS mkdir)
list(APPEND PROGS mismatch)
list(APPEND PROGS mktemp)
list(APPEND PROGS moo)
list(APPEND PROGS mugwump)
list(APPEND PROGS nanoid)
list(APPEND PROGS nl)
list(APPEND PROGS printenv)
list(APPEND PROGS pwd)
list(APPEND PROGS pwgen)
list(APPEND PROGS rev)
list(APPEND PROGS rmdir)
list(APPEND PROGS scrub)
list(APPEND PROGS seq)
list(APPEND PROGS shell)
list(APPEND PROGS sleep)
list(APPEND PROGS spell)
list(APPEND PROGS sponge)
list(APPEND PROGS stat)
list(APPEND PROGS sum)
list(APPEND PROGS sync)
list(APPEND PROGS tac)
list(APPEND PROGS tail)
list(APPEND PROGS tee)
list(APPEND PROGS tmpl)
list(APPEND PROGS touch)
list(APPEND PROGS true)
list(APPEND PROGS ts)
list(APPEND PROGS tty)
list(APPEND PROGS uname)
list(APPEND PROGS unexpand)
list(APPEND PROGS uniq)
list(APPEND PROGS units)
list(APPEND PROGS unix2dos)
list(APPEND PROGS unlink)
list(APPEND PROGS uptime)
list(APPEND PROGS uuidgen)
list(APPEND PROGS wc)
list(APPEND PROGS which)
list(APPEND PROGS who)
list(APPEND PROGS whoami)
list(APPEND PROGS xkcdpass)
list(APPEND PROGS yes)

foreach(PROG IN LISTS PROGS CURSES_PROGS CURL_PROGS)
    add_executable(${PROG} src/${PROG}.c)

    list(FIND CURSES_PROGS ${PROG} CURSES_NEEDED)
    if (NOT (${CURSES_NEEDED} EQUAL -1))
        target_link_libraries(${PROG} ${CURSES_LIBRARY})
    endif()

    list(FIND CURL_PROGS ${PROG} CURL_NEEDED)
    if (NOT (${CURL_NEEDED} EQUAL -1))
        target_link_libraries(${PROG} ${CURL_LIBRARY})
    endif()

    target_link_libraries(${PROG} ${LIBTC_LIBRARIES})
    target_include_directories(${PROG} PUBLIC ${LIBTC_INCLUDE_DIRS})
    target_compile_options(${PROG} PUBLIC ${LIBTC_CFLAGS_OTHER})

    target_link_libraries(${PROG} tc)

    install(TARGETS ${PROG} DESTINATION bin)
endforeach()

